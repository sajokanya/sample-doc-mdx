openapi: 3.1.0
info:
  title: Sample API for Mintlify
  description: |
    A comprehensive sample API specification demonstrating Mintlify features including:
    - API playground integration
    - Authentication methods
    - Custom Mintlify extensions
    - Webhooks support
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
    url: https://example.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from the authentication endpoint
    
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for accessing certain endpoints
    
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication with username and password

  schemas:
    User:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        name:
          type: string
          description: User's full name
          example: "John Doe"
        avatar:
          type: string
          format: uri
          description: URL to user's avatar image
          example: "https://example.com/avatars/johndoe.jpg"
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user was created
          example: "2023-01-15T09:30:00Z"
        role:
          type: string
          enum: [admin, user, moderator]
          description: User's role in the system
          example: "user"

    CreateUserRequest:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "newuser@example.com"
        name:
          type: string
          description: User's full name
          example: "Jane Smith"
        password:
          type: string
          format: password
          minLength: 8
          description: User's password (minimum 8 characters)
          example: "SecurePass123!"
        role:
          type: string
          enum: [admin, user, moderator]
          default: user
          description: User's role in the system

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "INVALID_REQUEST"
        message:
          type: string
          description: Human-readable error message
          example: "The request is invalid"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

    PaginatedUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          type: object
          properties:
            page:
              type: integer
              minimum: 1
              example: 1
            limit:
              type: integer
              minimum: 1
              maximum: 100
              example: 20
            total:
              type: integer
              example: 150
            total_pages:
              type: integer
              example: 8

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "NOT_FOUND"
            message: "The requested resource was not found"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "UNAUTHORIZED"
            message: "Authentication is required to access this resource"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "FORBIDDEN"
            message: "You don't have permission to access this resource"

paths:
  /users:
    get:
      summary: List all users
      description: Retrieve a paginated list of users with optional filtering
      operationId: listUsers
      x-mint:
        metadata:
          title: "Get Users"
          description: "Fetch paginated user data with advanced filtering options"
        content: |
          ## Prerequisites
          
          This endpoint requires authentication and has rate limiting applied.
          
          <Note>
          Results are paginated by default with a maximum of 100 users per page.
          </Note>
          
          ### Filtering Options
          
          You can filter users by:
          - Role (admin, user, moderator)
          - Creation date range
          - Search by name or email
        mcp:
          enabled: true
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number (starts from 1)
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [admin, user, moderator]
          example: user
        - name: search
          in: query
          description: Search users by name or email
          schema:
            type: string
          example: "john"
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
              example:
                users:
                  - id: "123e4567-e89b-12d3-a456-426614174000"
                    email: "john@example.com"
                    name: "John Doe"
                    avatar: "https://example.com/avatars/john.jpg"
                    created_at: "2023-01-15T09:30:00Z"
                    role: "user"
                pagination:
                  page: 1
                  limit: 20
                  total: 150
                  total_pages: 8
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create a new user
      description: Create a new user account in the system
      operationId: createUser
      x-mint:
        metadata:
          title: "Create User"
          description: "Add a new user to the system with role assignment"
        content: |
          ## User Creation Guidelines
          
          When creating a new user, ensure that:
          
          <Warning>
          Email addresses must be unique across the system.
          </Warning>
          
          <Info>
          Default role is 'user' unless specified otherwise.
          </Info>
          
          ### Password Requirements
          
          - Minimum 8 characters
          - Must contain at least one uppercase letter
          - Must contain at least one number
          - Must contain at least one special character
        mcp:
          enabled: true
      tags:
        - Users
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            example:
              email: "newuser@example.com"
              name: "Jane Smith"
              password: "SecurePass123!"
              role: "user"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "456e7890-e89b-12d3-a456-426614174001"
                email: "newuser@example.com"
                name: "Jane Smith"
                avatar: null
                created_at: "2023-12-01T14:30:00Z"
                role: "user"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "VALIDATION_ERROR"
                message: "Email address is already in use"
                details:
                  field: "email"
                  code: "DUPLICATE_VALUE"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve detailed information about a specific user
      operationId: getUserById
      x-mint:
        metadata:
          title: "Get User Details"
          description: "Fetch complete user information including profile data"
        mcp:
          enabled: true
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                email: "john@example.com"
                name: "John Doe"
                avatar: "https://example.com/avatars/john.jpg"
                created_at: "2023-01-15T09:30:00Z"
                role: "user"
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      x-mint:
        metadata:
          title: "Update User"
          description: "Modify user profile information and settings"
        content: |
          ## Update Permissions
          
          <Warning>
          Users can only update their own profile unless they have admin privileges.
          </Warning>
          
          ### Updatable Fields
          
          - Name
          - Avatar URL
          - Role (admin only)
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's full name
                  example: "John Updated Doe"
                avatar:
                  type: string
                  format: uri
                  description: URL to user's avatar image
                  example: "https://example.com/avatars/new-john.jpg"
                role:
                  type: string
                  enum: [admin, user, moderator]
                  description: User's role (admin only)
                  example: "moderator"
            example:
              name: "John Updated Doe"
              avatar: "https://example.com/avatars/new-john.jpg"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      summary: Delete user
      description: Remove a user from the system (admin only)
      operationId: deleteUser
      x-mint:
        metadata:
          title: "Delete User"
          description: "Permanently remove a user account from the system"
        content: |
          <Danger>
          This action is irreversible. All user data will be permanently deleted.
          </Danger>
          
          ## Admin Only
          
          This endpoint requires admin privileges and cannot be used by regular users.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: Unique identifier of the user
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticate a user and receive a JWT token
      operationId: loginUser
      x-mint:
        metadata:
          title: "User Login"
          description: "Authenticate with email and password to receive an access token"
        content: |
          ## Authentication Flow
          
          This endpoint uses basic authentication to verify user credentials and returns a JWT token for subsequent API calls.
          
          <Info>
          The returned JWT token should be included in the Authorization header as `Bearer <token>` for authenticated requests.
          </Info>
          
          ### Token Expiration
          
          JWT tokens expire after 24 hours. Use the refresh endpoint to obtain a new token.
        mcp:
          enabled: true
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "SecurePass123!"
            example:
              email: "user@example.com"
              password: "SecurePass123!"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  token_type:
                    type: string
                    example: "bearer"
                  expires_in:
                    type: integer
                    description: Token expiration time in seconds
                    example: 86400
                  user:
                    $ref: '#/components/schemas/User'
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                token_type: "bearer"
                expires_in: 86400
                user:
                  id: "123e4567-e89b-12d3-a456-426614174000"
                  email: "user@example.com"
                  name: "John Doe"
                  role: "user"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "INVALID_CREDENTIALS"
                message: "Email or password is incorrect"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

webhooks:
  userCreated:
    post:
      summary: User Created Webhook
      description: Triggered when a new user is created in the system
      operationId: userCreatedWebhook
      x-mint:
        metadata:
          title: "User Created Event"
          description: "Webhook payload sent when a new user account is created"
        content: |
          ## Event Details
          
          This webhook is triggered immediately after a user account is successfully created.
          
          <Info>
          Webhook delivery is attempted up to 3 times with exponential backoff.
          </Info>
      tags:
        - Webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  enum: [user.created]
                  description: Event type
                  example: "user.created"
                timestamp:
                  type: string
                  format: date-time
                  description: When the event occurred
                  example: "2023-12-01T14:30:00Z"
                data:
                  $ref: '#/components/schemas/User'
            example:
              event: "user.created"
              timestamp: "2023-12-01T14:30:00Z"
              data:
                id: "456e7890-e89b-12d3-a456-426614174001"
                email: "newuser@example.com"
                name: "Jane Smith"
                avatar: null
                created_at: "2023-12-01T14:30:00Z"
                role: "user"
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Invalid webhook payload
        '500':
          description: Internal server error

  userDeleted:
    post:
      summary: User Deleted Webhook
      description: Triggered when a user is deleted from the system
      operationId: userDeletedWebhook
      x-mint:
        metadata:
          title: "User Deleted Event"
          description: "Webhook payload sent when a user account is permanently deleted"
      tags:
        - Webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  enum: [user.deleted]
                  description: Event type
                  example: "user.deleted"
                timestamp:
                  type: string
                  format: date-time
                  description: When the event occurred
                  example: "2023-12-01T15:45:00Z"
                data:
                  type: object
                  properties:
                    user_id:
                      type: string
                      format: uuid
                      description: ID of the deleted user
                      example: "123e4567-e89b-12d3-a456-426614174000"
                    deleted_by:
                      type: string
                      format: uuid
                      description: ID of the admin who deleted the user
                      example: "789e1234-e89b-12d3-a456-426614174002"
            example:
              event: "user.deleted"
              timestamp: "2023-12-01T15:45:00Z"
              data:
                user_id: "123e4567-e89b-12d3-a456-426614174000"
                deleted_by: "789e1234-e89b-12d3-a456-426614174002"
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Invalid webhook payload

tags:
  - name: Users
    description: User management operations
  - name: Authentication
    description: Authentication and authorization endpoints
  - name: Webhooks
    description: Webhook event notifications

externalDocs:
  description: Find more info about our API
  url: https://example.com/docs
